/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloudata.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftRow implements TBase<ThriftRow._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ThriftRow");

  private static final TField ROW_KEY_FIELD_DESC = new TField("rowKey", TType.STRING, (short)1);
  private static final TField CELLS_FIELD_DESC = new TField("cells", TType.MAP, (short)2);

  public String rowKey;
  public Map<String,List<ThriftCell>> cells;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ROW_KEY((short)1, "rowKey"),
    CELLS((short)2, "cells");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.ROW_KEY, new FieldMetaData("rowKey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.CELLS, new FieldMetaData("cells", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, ThriftCell.class)))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ThriftRow.class, metaDataMap);
  }

  public ThriftRow() {
  }

  public ThriftRow(
    String rowKey,
    Map<String,List<ThriftCell>> cells)
  {
    this();
    this.rowKey = rowKey;
    this.cells = cells;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftRow(ThriftRow other) {
    if (other.isSetRowKey()) {
      this.rowKey = other.rowKey;
    }
    if (other.isSetCells()) {
      Map<String,List<ThriftCell>> __this__cells = new HashMap<String,List<ThriftCell>>();
      for (Map.Entry<String, List<ThriftCell>> other_element : other.cells.entrySet()) {

        String other_element_key = other_element.getKey();
        List<ThriftCell> other_element_value = other_element.getValue();

        String __this__cells_copy_key = other_element_key;

        List<ThriftCell> __this__cells_copy_value = new ArrayList<ThriftCell>();
        for (ThriftCell other_element_value_element : other_element_value) {
          __this__cells_copy_value.add(new ThriftCell(other_element_value_element));
        }

        __this__cells.put(__this__cells_copy_key, __this__cells_copy_value);
      }
      this.cells = __this__cells;
    }
  }

  public ThriftRow deepCopy() {
    return new ThriftRow(this);
  }

  @Deprecated
  public ThriftRow clone() {
    return new ThriftRow(this);
  }

  public String getRowKey() {
    return this.rowKey;
  }

  public ThriftRow setRowKey(String rowKey) {
    this.rowKey = rowKey;
    return this;
  }

  public void unsetRowKey() {
    this.rowKey = null;
  }

  /** Returns true if field rowKey is set (has been asigned a value) and false otherwise */
  public boolean isSetRowKey() {
    return this.rowKey != null;
  }

  public void setRowKeyIsSet(boolean value) {
    if (!value) {
      this.rowKey = null;
    }
  }

  public int getCellsSize() {
    return (this.cells == null) ? 0 : this.cells.size();
  }

  public void putToCells(String key, List<ThriftCell> val) {
    if (this.cells == null) {
      this.cells = new HashMap<String,List<ThriftCell>>();
    }
    this.cells.put(key, val);
  }

  public Map<String,List<ThriftCell>> getCells() {
    return this.cells;
  }

  public ThriftRow setCells(Map<String,List<ThriftCell>> cells) {
    this.cells = cells;
    return this;
  }

  public void unsetCells() {
    this.cells = null;
  }

  /** Returns true if field cells is set (has been asigned a value) and false otherwise */
  public boolean isSetCells() {
    return this.cells != null;
  }

  public void setCellsIsSet(boolean value) {
    if (!value) {
      this.cells = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROW_KEY:
      if (value == null) {
        unsetRowKey();
      } else {
        setRowKey((String)value);
      }
      break;

    case CELLS:
      if (value == null) {
        unsetCells();
      } else {
        setCells((Map<String,List<ThriftCell>>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROW_KEY:
      return getRowKey();

    case CELLS:
      return getCells();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case ROW_KEY:
      return isSetRowKey();
    case CELLS:
      return isSetCells();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftRow)
      return this.equals((ThriftRow)that);
    return false;
  }

  public boolean equals(ThriftRow that) {
    if (that == null)
      return false;

    boolean this_present_rowKey = true && this.isSetRowKey();
    boolean that_present_rowKey = true && that.isSetRowKey();
    if (this_present_rowKey || that_present_rowKey) {
      if (!(this_present_rowKey && that_present_rowKey))
        return false;
      if (!this.rowKey.equals(that.rowKey))
        return false;
    }

    boolean this_present_cells = true && this.isSetCells();
    boolean that_present_cells = true && that.isSetCells();
    if (this_present_cells || that_present_cells) {
      if (!(this_present_cells && that_present_cells))
        return false;
      if (!this.cells.equals(that.cells))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case ROW_KEY:
            if (field.type == TType.STRING) {
              this.rowKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case CELLS:
            if (field.type == TType.MAP) {
              {
                TMap _map8 = iprot.readMapBegin();
                this.cells = new HashMap<String,List<ThriftCell>>(2*_map8.size);
                for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                {
                  String _key10;
                  List<ThriftCell> _val11;
                  _key10 = iprot.readString();
                  {
                    TList _list12 = iprot.readListBegin();
                    _val11 = new ArrayList<ThriftCell>(_list12.size);
                    for (int _i13 = 0; _i13 < _list12.size; ++_i13)
                    {
                      ThriftCell _elem14;
                      _elem14 = new ThriftCell();
                      _elem14.read(iprot);
                      _val11.add(_elem14);
                    }
                    iprot.readListEnd();
                  }
                  this.cells.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.rowKey != null) {
      oprot.writeFieldBegin(ROW_KEY_FIELD_DESC);
      oprot.writeString(this.rowKey);
      oprot.writeFieldEnd();
    }
    if (this.cells != null) {
      oprot.writeFieldBegin(CELLS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.cells.size()));
        for (Map.Entry<String, List<ThriftCell>> _iter15 : this.cells.entrySet())
        {
          oprot.writeString(_iter15.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter15.getValue().size()));
            for (ThriftCell _iter16 : _iter15.getValue())
            {
              _iter16.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftRow(");
    boolean first = true;

    sb.append("rowKey:");
    if (this.rowKey == null) {
      sb.append("null");
    } else {
      sb.append(this.rowKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cells:");
    if (this.cells == null) {
      sb.append("null");
    } else {
      sb.append(this.cells);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

