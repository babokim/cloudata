/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloudata.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftCell implements TBase<ThriftCell._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftCell> {
  private static final TStruct STRUCT_DESC = new TStruct("ThriftCell");

  private static final TField CELL_KEY_FIELD_DESC = new TField("cellKey", TType.STRING, (short)1);
  private static final TField VALUES_FIELD_DESC = new TField("values", TType.LIST, (short)2);

  public String cellKey;
  public List<ThriftCellValue> values;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    CELL_KEY((short)1, "cellKey"),
    VALUES((short)2, "values");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.CELL_KEY, new FieldMetaData("cellKey", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.VALUES, new FieldMetaData("values", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ThriftCellValue.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ThriftCell.class, metaDataMap);
  }

  public ThriftCell() {
  }

  public ThriftCell(
    String cellKey,
    List<ThriftCellValue> values)
  {
    this();
    this.cellKey = cellKey;
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftCell(ThriftCell other) {
    if (other.isSetCellKey()) {
      this.cellKey = other.cellKey;
    }
    if (other.isSetValues()) {
      List<ThriftCellValue> __this__values = new ArrayList<ThriftCellValue>();
      for (ThriftCellValue other_element : other.values) {
        __this__values.add(new ThriftCellValue(other_element));
      }
      this.values = __this__values;
    }
  }

  public ThriftCell deepCopy() {
    return new ThriftCell(this);
  }

  @Deprecated
  public ThriftCell clone() {
    return new ThriftCell(this);
  }

  public String getCellKey() {
    return this.cellKey;
  }

  public ThriftCell setCellKey(String cellKey) {
    this.cellKey = cellKey;
    return this;
  }

  public void unsetCellKey() {
    this.cellKey = null;
  }

  /** Returns true if field cellKey is set (has been asigned a value) and false otherwise */
  public boolean isSetCellKey() {
    return this.cellKey != null;
  }

  public void setCellKeyIsSet(boolean value) {
    if (!value) {
      this.cellKey = null;
    }
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<ThriftCellValue> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(ThriftCellValue elem) {
    if (this.values == null) {
      this.values = new ArrayList<ThriftCellValue>();
    }
    this.values.add(elem);
  }

  public List<ThriftCellValue> getValues() {
    return this.values;
  }

  public ThriftCell setValues(List<ThriftCellValue> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been asigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CELL_KEY:
      if (value == null) {
        unsetCellKey();
      } else {
        setCellKey((String)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<ThriftCellValue>)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CELL_KEY:
      return getCellKey();

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case CELL_KEY:
      return isSetCellKey();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftCell)
      return this.equals((ThriftCell)that);
    return false;
  }

  public boolean equals(ThriftCell that) {
    if (that == null)
      return false;

    boolean this_present_cellKey = true && this.isSetCellKey();
    boolean that_present_cellKey = true && that.isSetCellKey();
    if (this_present_cellKey || that_present_cellKey) {
      if (!(this_present_cellKey && that_present_cellKey))
        return false;
      if (!this.cellKey.equals(that.cellKey))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftCell other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftCell typedOther = (ThriftCell)other;

    lastComparison = Boolean.valueOf(isSetCellKey()).compareTo(isSetCellKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(cellKey, typedOther.cellKey);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(values, typedOther.values);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case CELL_KEY:
            if (field.type == TType.STRING) {
              this.cellKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case VALUES:
            if (field.type == TType.LIST) {
              {
                TList _list4 = iprot.readListBegin();
                this.values = new ArrayList<ThriftCellValue>(_list4.size);
                for (int _i5 = 0; _i5 < _list4.size; ++_i5)
                {
                  ThriftCellValue _elem6;
                  _elem6 = new ThriftCellValue();
                  _elem6.read(iprot);
                  this.values.add(_elem6);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.cellKey != null) {
      oprot.writeFieldBegin(CELL_KEY_FIELD_DESC);
      oprot.writeString(this.cellKey);
      oprot.writeFieldEnd();
    }
    if (this.values != null) {
      oprot.writeFieldBegin(VALUES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.values.size()));
        for (ThriftCellValue _iter7 : this.values)
        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftCell(");
    boolean first = true;

    sb.append("cellKey:");
    if (this.cellKey == null) {
      sb.append("null");
    } else {
      sb.append(this.cellKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

