/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.cloudata.thrift.generated;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class ThriftColumnInfo implements TBase<ThriftColumnInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftColumnInfo> {
  private static final TStruct STRUCT_DESC = new TStruct("ThriftColumnInfo");

  private static final TField COLUMN_NAME_FIELD_DESC = new TField("columnName", TType.STRING, (short)1);
  private static final TField NUM_OF_VERSION_FIELD_DESC = new TField("numOfVersion", TType.STRING, (short)2);
  private static final TField COLUMN_TYPE_FIELD_DESC = new TField("columnType", TType.STRING, (short)3);

  public String columnName;
  public String numOfVersion;
  public String columnType;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    COLUMN_NAME((short)1, "columnName"),
    NUM_OF_VERSION((short)2, "numOfVersion"),
    COLUMN_TYPE((short)3, "columnType");

    private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byId.put((int)field._thriftId, field);
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      return byId.get(fieldId);
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
    put(_Fields.COLUMN_NAME, new FieldMetaData("columnName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.NUM_OF_VERSION, new FieldMetaData("numOfVersion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(_Fields.COLUMN_TYPE, new FieldMetaData("columnType", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ThriftColumnInfo.class, metaDataMap);
  }

  public ThriftColumnInfo() {
  }

  public ThriftColumnInfo(
    String columnName,
    String numOfVersion,
    String columnType)
  {
    this();
    this.columnName = columnName;
    this.numOfVersion = numOfVersion;
    this.columnType = columnType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftColumnInfo(ThriftColumnInfo other) {
    if (other.isSetColumnName()) {
      this.columnName = other.columnName;
    }
    if (other.isSetNumOfVersion()) {
      this.numOfVersion = other.numOfVersion;
    }
    if (other.isSetColumnType()) {
      this.columnType = other.columnType;
    }
  }

  public ThriftColumnInfo deepCopy() {
    return new ThriftColumnInfo(this);
  }

  @Deprecated
  public ThriftColumnInfo clone() {
    return new ThriftColumnInfo(this);
  }

  public String getColumnName() {
    return this.columnName;
  }

  public ThriftColumnInfo setColumnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

  public void unsetColumnName() {
    this.columnName = null;
  }

  /** Returns true if field columnName is set (has been asigned a value) and false otherwise */
  public boolean isSetColumnName() {
    return this.columnName != null;
  }

  public void setColumnNameIsSet(boolean value) {
    if (!value) {
      this.columnName = null;
    }
  }

  public String getNumOfVersion() {
    return this.numOfVersion;
  }

  public ThriftColumnInfo setNumOfVersion(String numOfVersion) {
    this.numOfVersion = numOfVersion;
    return this;
  }

  public void unsetNumOfVersion() {
    this.numOfVersion = null;
  }

  /** Returns true if field numOfVersion is set (has been asigned a value) and false otherwise */
  public boolean isSetNumOfVersion() {
    return this.numOfVersion != null;
  }

  public void setNumOfVersionIsSet(boolean value) {
    if (!value) {
      this.numOfVersion = null;
    }
  }

  public String getColumnType() {
    return this.columnType;
  }

  public ThriftColumnInfo setColumnType(String columnType) {
    this.columnType = columnType;
    return this;
  }

  public void unsetColumnType() {
    this.columnType = null;
  }

  /** Returns true if field columnType is set (has been asigned a value) and false otherwise */
  public boolean isSetColumnType() {
    return this.columnType != null;
  }

  public void setColumnTypeIsSet(boolean value) {
    if (!value) {
      this.columnType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLUMN_NAME:
      if (value == null) {
        unsetColumnName();
      } else {
        setColumnName((String)value);
      }
      break;

    case NUM_OF_VERSION:
      if (value == null) {
        unsetNumOfVersion();
      } else {
        setNumOfVersion((String)value);
      }
      break;

    case COLUMN_TYPE:
      if (value == null) {
        unsetColumnType();
      } else {
        setColumnType((String)value);
      }
      break;

    }
  }

  public void setFieldValue(int fieldID, Object value) {
    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return getColumnName();

    case NUM_OF_VERSION:
      return getNumOfVersion();

    case COLUMN_TYPE:
      return getColumnType();

    }
    throw new IllegalStateException();
  }

  public Object getFieldValue(int fieldId) {
    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    switch (field) {
    case COLUMN_NAME:
      return isSetColumnName();
    case NUM_OF_VERSION:
      return isSetNumOfVersion();
    case COLUMN_TYPE:
      return isSetColumnType();
    }
    throw new IllegalStateException();
  }

  public boolean isSet(int fieldID) {
    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftColumnInfo)
      return this.equals((ThriftColumnInfo)that);
    return false;
  }

  public boolean equals(ThriftColumnInfo that) {
    if (that == null)
      return false;

    boolean this_present_columnName = true && this.isSetColumnName();
    boolean that_present_columnName = true && that.isSetColumnName();
    if (this_present_columnName || that_present_columnName) {
      if (!(this_present_columnName && that_present_columnName))
        return false;
      if (!this.columnName.equals(that.columnName))
        return false;
    }

    boolean this_present_numOfVersion = true && this.isSetNumOfVersion();
    boolean that_present_numOfVersion = true && that.isSetNumOfVersion();
    if (this_present_numOfVersion || that_present_numOfVersion) {
      if (!(this_present_numOfVersion && that_present_numOfVersion))
        return false;
      if (!this.numOfVersion.equals(that.numOfVersion))
        return false;
    }

    boolean this_present_columnType = true && this.isSetColumnType();
    boolean that_present_columnType = true && that.isSetColumnType();
    if (this_present_columnType || that_present_columnType) {
      if (!(this_present_columnType && that_present_columnType))
        return false;
      if (!this.columnType.equals(that.columnType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftColumnInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftColumnInfo typedOther = (ThriftColumnInfo)other;

    lastComparison = Boolean.valueOf(isSetColumnName()).compareTo(isSetColumnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(columnName, typedOther.columnName);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetNumOfVersion()).compareTo(isSetNumOfVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(numOfVersion, typedOther.numOfVersion);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetColumnType()).compareTo(isSetColumnType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(columnType, typedOther.columnType);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      _Fields fieldId = _Fields.findByThriftId(field.id);
      if (fieldId == null) {
        TProtocolUtil.skip(iprot, field.type);
      } else {
        switch (fieldId) {
          case COLUMN_NAME:
            if (field.type == TType.STRING) {
              this.columnName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NUM_OF_VERSION:
            if (field.type == TType.STRING) {
              this.numOfVersion = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COLUMN_TYPE:
            if (field.type == TType.STRING) {
              this.columnType = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
        }
        iprot.readFieldEnd();
      }
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.columnName != null) {
      oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
      oprot.writeString(this.columnName);
      oprot.writeFieldEnd();
    }
    if (this.numOfVersion != null) {
      oprot.writeFieldBegin(NUM_OF_VERSION_FIELD_DESC);
      oprot.writeString(this.numOfVersion);
      oprot.writeFieldEnd();
    }
    if (this.columnType != null) {
      oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
      oprot.writeString(this.columnType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftColumnInfo(");
    boolean first = true;

    sb.append("columnName:");
    if (this.columnName == null) {
      sb.append("null");
    } else {
      sb.append(this.columnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numOfVersion:");
    if (this.numOfVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.numOfVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columnType:");
    if (this.columnType == null) {
      sb.append("null");
    } else {
      sb.append(this.columnType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

