#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ThriftCloudataService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   listTables()'
  print '  void put(string tableName, ThriftRow row, bool useSystemTimestamp)'
  print '  void removeRow(string tableName, string rowKey)'
  print '  void removeRowWithTime(string tableName, string rowKey, string timestamp)'
  print '  void remove(string tableName, string rowKey, string columnName, string cellKey)'
  print '  bool hasValue(string tableName, string columnName, string rowKey)'
  print '  string getValue(string tableName, string rowKey, string columnName, string cellKey)'
  print '  ThriftRow get(string tableName, string rowKey)'
  print '  ThriftRow getColumnRow(string tableName, string rowKey,  columnNames)'
  print '  void createTable(ThriftTableSchema tableSchema)'
  print '  bool existsTable(string tableName)'
  print '  void dropTable(string tableName)'
  print '  void truncateTable(string tableName, bool clearPartitionInfo)'
  print '  void truncateColumn(string tableName, string columnName)'
  print '  ThriftTableSchema descTable(string tableName)'
  print '  void addColumn(string tableName, string addedColumnName)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ThriftCloudataService.Client(protocol)
transport.open()

if cmd == 'listTables':
  if len(args) != 0:
    print 'listTables requires 0 args'
    sys.exit(1)
  pp.pprint(client.listTables())

elif cmd == 'put':
  if len(args) != 3:
    print 'put requires 3 args'
    sys.exit(1)
  pp.pprint(client.put(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'removeRow':
  if len(args) != 2:
    print 'removeRow requires 2 args'
    sys.exit(1)
  pp.pprint(client.removeRow(args[0],args[1],))

elif cmd == 'removeRowWithTime':
  if len(args) != 3:
    print 'removeRowWithTime requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeRowWithTime(args[0],args[1],args[2],))

elif cmd == 'remove':
  if len(args) != 4:
    print 'remove requires 4 args'
    sys.exit(1)
  pp.pprint(client.remove(args[0],args[1],args[2],args[3],))

elif cmd == 'hasValue':
  if len(args) != 3:
    print 'hasValue requires 3 args'
    sys.exit(1)
  pp.pprint(client.hasValue(args[0],args[1],args[2],))

elif cmd == 'getValue':
  if len(args) != 4:
    print 'getValue requires 4 args'
    sys.exit(1)
  pp.pprint(client.getValue(args[0],args[1],args[2],args[3],))

elif cmd == 'get':
  if len(args) != 2:
    print 'get requires 2 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],args[1],))

elif cmd == 'getColumnRow':
  if len(args) != 3:
    print 'getColumnRow requires 3 args'
    sys.exit(1)
  pp.pprint(client.getColumnRow(args[0],args[1],eval(args[2]),))

elif cmd == 'createTable':
  if len(args) != 1:
    print 'createTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.createTable(eval(args[0]),))

elif cmd == 'existsTable':
  if len(args) != 1:
    print 'existsTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.existsTable(args[0],))

elif cmd == 'dropTable':
  if len(args) != 1:
    print 'dropTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.dropTable(args[0],))

elif cmd == 'truncateTable':
  if len(args) != 2:
    print 'truncateTable requires 2 args'
    sys.exit(1)
  pp.pprint(client.truncateTable(args[0],eval(args[1]),))

elif cmd == 'truncateColumn':
  if len(args) != 2:
    print 'truncateColumn requires 2 args'
    sys.exit(1)
  pp.pprint(client.truncateColumn(args[0],args[1],))

elif cmd == 'descTable':
  if len(args) != 1:
    print 'descTable requires 1 args'
    sys.exit(1)
  pp.pprint(client.descTable(args[0],))

elif cmd == 'addColumn':
  if len(args) != 2:
    print 'addColumn requires 2 args'
    sys.exit(1)
  pp.pprint(client.addColumn(args[0],args[1],))

transport.close()
