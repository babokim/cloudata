/* Generated By:JavaCC: Do not edit this line. CqlParser.java */
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.cloudata.core.client.cql.javacc;

import java.io.*;
import java.util.*;
import org.cloudata.core.tablet.*;
import org.cloudata.core.client.*;
import org.cloudata.core.client.cql.*;
import org.cloudata.core.client.cql.statement.*;
import org.cloudata.core.client.cql.element.*;

public class CqlParser implements CqlParserConstants {
  public CqlParser(String query) {
    this(new StringReader(query));
  }

  final public QueryStatement parseStmt() throws ParseException {
  QueryStatement statement;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      statement = select();
      break;
    case CREATE:
      statement = createTable();
      break;
    case DROP:
      statement = drop();
      break;
    case INSERT:
      statement = insert();
      break;
    case DELETE:
      statement = delete();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTableStatement createTable() throws ParseException {
  Token tk;
  String tmp;
  TableSchema table = new TableSchema( );
  CreateTableStatement stmt = new CreateTableStatement( );
    jj_consume_token(CREATE);
    jj_consume_token(TABLE);
    tk = jj_consume_token(IDENTIFIER);
    table.setTableName( tk.image);
    jj_consume_token(LEFT_PAREN);
    tk = jj_consume_token(IDENTIFIER);
      table.addColumn(tk.image);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      tk = jj_consume_token(IDENTIFIER);
        table.addColumn(tk.image);
    }
    jj_consume_token(RIGHT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
      jj_consume_token(VERSION);
      jj_consume_token(EQ);
      tk = jj_consume_token(INT_NUM);
      table.setNumOfVersion(Integer.parseInt(tk.image));
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      jj_consume_token(COMMENT);
      jj_consume_token(EQ);
      tk = jj_consume_token(STRING_LITERAL);
      tmp = tk.image;
      table.setDescription(tmp.substring( 1, tmp.length( ) -1));
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    stmt.setTable(table);
    {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public DropStatement drop() throws ParseException {
  Token tk;
  DropStatement drop = new DropStatement( );
    jj_consume_token(DROP);
    jj_consume_token(TABLE);
    tk = jj_consume_token(IDENTIFIER);
    drop.setTableName(tk.image);
    {if (true) return drop;}
    throw new Error("Missing return statement in function");
  }

  final public InsertStatement insert() throws ParseException {
  Token tk;
  Token value;
  String tmp;
  List<ColumnElement> columns;
  List<String[]> columnValues;
  InsertStatement insert = new InsertStatement();
    jj_consume_token(INSERT);
    jj_consume_token(INTO);
    tk = jj_consume_token(IDENTIFIER);
    insert.setTableName(tk.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      columns = selectCols();
      insert.setColumns(columns);
      jj_consume_token(RIGHT_PAREN);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    columnValues = columnValues();
    insert.setColumnValues(columnValues);
    jj_consume_token(RIGHT_PAREN);
    jj_consume_token(WHERE);
    tk = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQ);
    value = jj_consume_token(STRING_LITERAL);
    insert.setRowKeyName(tk.image);
    tmp = value.image;
    insert.setRowKey(tmp.substring( 1, tmp.length() -1));
    {if (true) return insert;}
    throw new Error("Missing return statement in function");
  }

  final public List<String[]> columnValues() throws ParseException {
  List<String[]> list = new ArrayList<String[]>();
  String[] columnValue;
    columnValue = columnValue();
    list.add(columnValue);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      columnValue = columnValue();
      list.add(columnValue);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        columnValue = columnValue();
        list.add(columnValue);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String[] columnValue() throws ParseException {
  Token tk;
  String tmp;
  String[] columnValue = new String[2];
    jj_consume_token(LEFT_PAREN);
    tk = jj_consume_token(STRING_LITERAL);
    tmp = tk.image;
    columnValue[0] = tmp.substring( 1, tmp.length( ) -1);
    jj_consume_token(COMMA);
    tk = jj_consume_token(STRING_LITERAL);
    tmp = tk.image;
    columnValue[1] = tmp.substring( 1, tmp.length( ) -1);
    jj_consume_token(RIGHT_PAREN);
    {if (true) return columnValue;}
    throw new Error("Missing return statement in function");
  }

  final public DeleteStatement delete() throws ParseException {
  Token tk;
  String tmp;
  DeleteStatement delete = new DeleteStatement();
  List<ColumnElement> columns;
  WhereExpression where;
    jj_consume_token(DELETE);
    columns = selectCols();
    delete.setColumns(columns);
    jj_consume_token(FROM);
    tk = jj_consume_token(IDENTIFIER);
    delete.setTableName(tk.image);
    where = where();
    delete.setWhere(where);
    {if (true) return delete;}
    throw new Error("Missing return statement in function");
  }

  final private SelectStatement select() throws ParseException {
  SelectStatement select = new SelectStatement();
  List<ColumnElement> columns;
  List<FromElement> tables;
  WhereExpression where;
    jj_consume_token(SELECT);
    columns = selectCols();
    select.setSelectColumns(columns);
    jj_consume_token(FROM);
    tables = tableList();
    select.setFromTables(tables);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      where = where();
        select.setWhere(where);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return select;}
    throw new Error("Missing return statement in function");
  }

  final private WhereExpression where() throws ParseException {
  WhereExpression where;
    jj_consume_token(WHERE);
    where = orExpression();
    {if (true) return where;}
    throw new Error("Missing return statement in function");
  }

  final private WhereExpression orExpression() throws ParseException {
  WhereExpression where = new WhereExpression();
  List<WhereExpressionElement> elements = new ArrayList<WhereExpressionElement>();
    elements = andExpression();
    where.addElements(elements);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      Operator op = new Operator(Operator.OPERATOR.OR);
      where.addElement(op);
      elements = andExpression();
      where.addElements(elements);
    }
    {if (true) return where;}
    throw new Error("Missing return statement in function");
  }

  final private List<WhereExpressionElement> andExpression() throws ParseException {
  List<WhereExpressionElement> elements = new ArrayList<WhereExpressionElement>();
  WhereExpressionElement element;
    element = compareExpression();
    elements.add(element);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      Operator op = new Operator(Operator.OPERATOR.AND);
      elements.add(op);
      element = compareExpression();
      elements.add(element);
    }
    {if (true) return elements;}
    throw new Error("Missing return statement in function");
  }

  final private WhereExpressionElement compareExpression() throws ParseException {
  SingleColumnElement columnElement = new SingleColumnElement();
  WhereExpressionElement compareExpression;
  Token token;
    token = jj_consume_token(IDENTIFIER);
    columnElement.setColumnName(token.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIKE:
      compareExpression = likeExpression(columnElement);
      break;
    case EQ:
    case GT:
    case LT:
    case GT_EQ:
    case LT_EQ:
      compareExpression = boolExpression(columnElement);
      break;
    case BETWEEN:
    case DOT:
      compareExpression = betweenExpression(columnElement);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return compareExpression;}
    throw new Error("Missing return statement in function");
  }

  final private WhereExpressionElement likeExpression(SingleColumnElement columnElement) throws ParseException {
  LikeExpression likeExpression = new LikeExpression();
  StringLiteral value = new StringLiteral();
  Token token;
    jj_consume_token(LIKE);
    token = jj_consume_token(STRING_LITERAL);
    value.setValue(token.image);
    likeExpression.setColumn(columnElement);
    likeExpression.setValue(value);
    {if (true) return likeExpression;}
    throw new Error("Missing return statement in function");
  }

  final private WhereExpressionElement boolExpression(SingleColumnElement columnElement) throws ParseException {
  BoolExpression boolExpression = new BoolExpression();
  StringLiteral value = new StringLiteral();
  Token token = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      token = jj_consume_token(EQ);
      break;
    case GT:
      jj_consume_token(GT);
      break;
    case GT_EQ:
      jj_consume_token(GT_EQ);
      break;
    case LT:
      jj_consume_token(LT);
      break;
    case LT_EQ:
      jj_consume_token(LT_EQ);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    boolExpression.setOperator(token.image);
    token = jj_consume_token(STRING_LITERAL);
      value.setValue(token.image);
    boolExpression.setColumn(columnElement);
    boolExpression.setValue(value);
    {if (true) return boolExpression;}
    throw new Error("Missing return statement in function");
  }

  final private WhereExpressionElement betweenExpression(SingleColumnElement columnElement) throws ParseException {
  BetweenExpression betweenExpression = new BetweenExpression();
  StringLiteral fromValue = new StringLiteral();
  StringLiteral toValue = new StringLiteral();

  Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(TIMESTAMP);
      columnElement.setTimestamp(true);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(BETWEEN);
    token = jj_consume_token(STRING_LITERAL);
    fromValue.setValue(token.image);
    jj_consume_token(AND);
    token = jj_consume_token(STRING_LITERAL);
    toValue.setValue(token.image);
    betweenExpression.setColumn(columnElement);
    betweenExpression.setFromValue(fromValue);
    betweenExpression.setToValue(toValue);
    {if (true) return betweenExpression;}
    throw new Error("Missing return statement in function");
  }

  final private List<ColumnElement> selectCols() throws ParseException {
  List<ColumnElement> columns;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      columns = new ArrayList<ColumnElement>();
      columns.add(new AllColumnElement());
      {if (true) return columns;}
      break;
    case IDENTIFIER:
      columns = selectList();
      {if (true) return columns;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private List<ColumnElement> selectList() throws ParseException {
  List<ColumnElement> columns = new ArrayList<ColumnElement>();
  ColumnElement element;
    element = selectExpr();
                           columns.add(element);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      element = selectExpr();
                             columns.add(element);
    }
    {if (true) return columns;}
    throw new Error("Missing return statement in function");
  }

  final private ColumnElement selectExpr() throws ParseException {
  ColumnElement element;
    element = singleColumnElement();
    {if (true) return element;}
    throw new Error("Missing return statement in function");
  }

  final private ColumnElement singleColumnElement() throws ParseException {
  SingleColumnElement columnElement = new SingleColumnElement();
  Token token;
  boolean timestamp = false;
    token = jj_consume_token(IDENTIFIER);
    columnElement.setColumnName(token.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(TIMESTAMP);
      columnElement.setTimestamp(true);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return columnElement;}
    throw new Error("Missing return statement in function");
  }

  final private List<FromElement> tableList() throws ParseException {
  List<FromElement> from = new ArrayList<FromElement>();
  FromElement element;
  Token token;
    element = fromElement();
                            from.add(element);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      element = fromElement();
                              from.add(element);
    }
    {if (true) return from;}
    throw new Error("Missing return statement in function");
  }

  final private FromElement fromElement() throws ParseException {
  FromElement fromElement = new FromElement();
  Token token;
  SelectStatement selectStmt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
      fromElement.setTableName(token.image);
      {if (true) return fromElement;}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      selectStmt = select();
      jj_consume_token(RIGHT_PAREN);
      fromElement.setSubquery(selectStmt);
      {if (true) return fromElement;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public CqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa00620,0x4000000,0x80,0x100,0x20000000,0x4000000,0x4000000,0x2000,0x40000,0x20000,0x8800c000,0x80000000,0x8000000,0x10000000,0x4000000,0x8000000,0x4000000,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf,0xf,0x0,0x80,0x0,0x0,0x0,0x80,};
   }

  /** Constructor with InputStream. */
  public CqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CqlParser(CqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
