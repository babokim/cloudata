<?xml version="1.0"?>

<project name="cloudata" default="compile" basedir=".">
  <description>
    cloudata..
  </description>
  
  <!-- Load all the default properties, and any the user wants    -->
  <!-- to contribute (without having to type -D or edit this file -->
  <property file="${basedir}/build.properties" />
 
  <property name="Name" value="cloudata"/>
  <property name="name" value="cloudata"/>
  <property name="version" value="1.0.0"/>
  <property name="final.name" value="${name}-${version}"/>
  <property name="year" value="2010"/>

  <property name="src" value="${basedir}/src"/>
  <property name="src.dir" value="${src}/java"/>
  <property name="src.unit_test" value="${src}/unit_test"/>
  <property name="src.examples" value="${basedir}/src/examples"/>
  <property name="lib.dir" value="${basedir}/lib"/>
  <property name="conf.dir" value="${basedir}/conf"/>
  <property name="docs.dir" value="${basedir}/docs"/>
  <property name="src.webapps" value="${basedir}/src/webapps"/>

  <property name="build.dir" value="${basedir}/build"/>
  <property name="build.webapps" value="${build.dir}/webapps"/>
  <property name="build.examples" value="${build.dir}/examples"/>
  <property name="build.test" value="${build.dir}/test"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.src" value="${build.dir}/src"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.encoding" value="ISO-8859-1"/>

  <property name="deploy.dir" value="${basedir}/build"/>
  <property name="cloudata.log.dir" location="${build.dir}/test/logs"/>
  <property name="hadoop.log.dir" location="${build.dir}/test/logs"/>

  <property name="dist.dir" value="${build.dir}/${final.name}"/>

  <property name="test.junit.output.format" value="plain"/>
  <property name="test.timeout" value="3000000"/>
  
  <property name="javac.debug" value="yes"/>
  <property name="javac.optimize" value="yes"/>
  <property name="javac.deprecation" value="off"/>
  <property name="javac.version" value="1.6"/>

  <path id="cobertura.classpath">
    <fileset dir="${cobertura.dir}">
      <include name="cobertura.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
  </path>
        
  <!-- the normal classpath -->
  <path id="classpath">
    <pathelement location="${build.classes}"/>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${hadoop.home}">
      <include name="hadoop-*.jar" />
      <include name="lib/**/*.jar" />
    </fileset>
    <pathelement location="${conf.dir}"/>
  </path>

  <taskdef classname="org.apache.jasper.JspC" name="jsp-compile" >
    <classpath refid="classpath"/>
  </taskdef>

  <!-- ====================================================== -->
  <!-- Stuff needed by all targets                            -->
  <!-- ====================================================== -->
  <target name="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.examples}"/>
    <mkdir dir="${build.webapps}/master/WEB-INF"/>
    <mkdir dir="${build.webapps}/cloudatafs/WEB-INF"/>
    <mkdir dir="${reports.xml.dir}" />
    <mkdir dir="${reports.html.dir}" />

    <copy todir="${conf.dir}" verbose="true">
      <fileset dir="${conf.dir}" includes="**/*.template"/>
    </copy>
    
    <copy todir="${build.webapps}">
      <fileset dir="${src.webapps}">
        <exclude name="**/*.jsp" />
      </fileset>
    </copy>
  </target>
  
  <!-- ====================================================== -->
  <!-- Compile the JavaCC                                     -->
  <!-- ====================================================== -->
  <target name="javacc" if="javacc.home">
  	<!--
    <property name="javacc.create.src.dir" value="${src.dir}/org/cloudata/core/client/cql/javacc" />
    <javacc target="${javacc.create.src.dir}/CqlParser.jj" outputdirectory="${javacc.create.src.dir}" javacchome="${javacc.home}" />
    -->
  </target>
  
  <!-- ====================================================== -->
  <!-- Compile the Java files                                 -->
  <!-- ====================================================== -->
  <target name="compile-core" depends="init, javacc">
    <jsp-compile
      uriroot="${src.webapps}/master"
      outputdir="${build.src}"
      package="org.cloudata.core.master"
      webxml="${build.webapps}/master/WEB-INF/web.xml">
    </jsp-compile>
      
    <jsp-compile
      uriroot="${src.webapps}/cloudatafs"
      outputdir="${build.src}"
      package="org.cloudata.tools.cloudatafs"
      webxml="${build.webapps}/cloudatafs/WEB-INF/web.xml">
    </jsp-compile>
  	
    <javac 
      encoding="${build.encoding}" 
      srcdir="${src.dir};${build.src}"
      includes="org/**/*.java"
      destdir="${build.classes}"
      debug="true"
      optimize="${javac.optimize}"
      target="${javac.version}"
      source="${javac.version}"
      deprecation="${javac.deprecation}">
      <classpath refid="classpath"/>
    </javac>    
  </target>

  <target name="compile" depends="compile-core">
  </target>

  <!-- ================================================================== -->
  <!-- Compile test code                                                  --> 
  <!-- ================================================================== -->
  <target name="compile-test" depends="compile-core"> 
    <echo message="compile cloudata unit test cases"/> 
    <javac 
      encoding="${build.encoding}" 
      srcdir="${src.unit_test}"
      destdir="${build.test}" 
      debug="true"> 
      <classpath refid="test.classpath"/> 
    </javac>
      
    <jar jarfile="${build.dir}/${name}-${version}-test.jar" >
      <fileset dir="${build.test}" includes="org/cloudata/**" />
      <fileset dir="${build.test}" includes="**/*.xml" />
    </jar>
  </target>

  <!-- ================================================================== -->
  <!-- Compile examples code                                              --> 
  <!-- ================================================================== -->
  <target name="compile-examples" depends="compile-core"> 
    <echo message="compile cloudata examples"/> 
    <javac 
      encoding="${build.encoding}" 
      srcdir="${src.examples}" 
      includes="*/org/**/*.java"
      destdir="${build.examples}" 
      debug="true"> 
      <classpath refid="classpath"/>
    </javac>
    
    <jar jarfile="${build.dir}/${name}-${version}-examples.jar" >
      <fileset dir="${build.examples}" includes="org/cloudata/**" />
    </jar>
  </target>
  
  <!-- ================================================================== -->
  <!-- Make jar                                                           -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="jar" depends="compile-core">
    <jar jarfile="${build.dir}/${final.name}-core.jar" basedir="${build.classes}">
      <fileset file="${conf.dir}/cloudata-default.xml"/>
      <fileset file="${conf.dir}/log4j.properties"/>
      <zipfileset dir="${build.webapps}" prefix="webapps"/>
    </jar>
  </target>

  <!-- ================================================================== -->
  <!-- D I S T R I B U T I O N                                            -->
  <!-- ================================================================== -->
  <!--                                                                    -->
  <!-- ================================================================== -->
  <target name="package" depends="jar">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/bin"/>

    <copy todir="${dist.dir}/lib" includeEmptyDirs="false">
      <fileset dir="lib"/>
    </copy>

    <copy file="${build.dir}/${final.name}-core.jar" todir="${dist.dir}"/>

    <copy todir="${dist.dir}/bin">
      <fileset dir="bin"/>
    </copy>

    <copy todir="${dist.dir}/conf">
      <fileset dir="${conf.dir}" excludes="**/*.template"/>
    </copy>

    <chmod perm="ugo+x" type="file">
      <fileset dir="${dist.dir}/bin"/>
    </chmod>

    <copy todir="${dist.dir}">
      <fileset dir=".">
        <include name="*.txt" />
      </fileset>
    </copy>

    <copy todir="${dist.dir}/src" includeEmptyDirs="true">
      <fileset dir="src"/>
    </copy>

    <copy todir="${dist.dir}/" file="build.xml"/>

  </target>

  <!-- ================================================================== -->
  <!-- Clean.  Delete the build files, and their directories              -->
  <!-- ================================================================== -->
  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>

  <!-- ================================================================== -->
  <!-- Run unit tests (Test for Hudson)                                   -->
  <!-- ================================================================== -->
  <path id="test.classpath">
    <pathelement location="${build.test}" />
    <pathelement location="${src.unit_test}"/>
    <pathelement location="${conf.dir}"/>
    <pathelement location="${basedir}/build"/>
    <pathelement location="${basedir}/build/classes"/>
    <path refid="classpath"/>
  </path>
  
  <target name="restart_all">
    <exec executable="bin/all_restart.sh"/>
  </target>
  
  <target name="test_for_hudson" depends="clean, compile-test, restart_all" if="test.available">
    <echo message="Running Unit Test"/>
    <junit
      printsummary="on" showoutput="yes" 
      haltonfailure="off" fork="on" maxmemory="512m" forkmode="perTest"
      errorProperty="tests.failed" failureProperty="tests.failed"
      timeout="${test.timeout}"
      dir="${basedir}">
      
      <classpath refid="test.classpath"/>
      <formatter type="xml" />
      
      <test name="org.cloudata.AllSuite"
        haltonfailure="no"
        todir="${reports.xml.dir}"
        outfile="TEST-AllSuite">
        
        <formatter type="xml"/>
      </test>
    </junit>
  </target>
</project>
