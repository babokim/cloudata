<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head><title>neptune</title>

<style type="text/css" media="all">
@import url("http://www.jaso.co.kr/neptune/css/maven-base.css");
@import url("http://www.jaso.co.kr/neptune/css/maven-theme.css");
@import url("http://www.jaso.co.kr/neptune/css/site.css");
</style>
<link rel="stylesheet" href="http://www.jaso.co.kr/neptune/css/print.css" type="text/css" media="print" />
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<link rel="SHORTCUT ICON" href="favicon.ico" />
</head>
<body class="composite">
<div id="banner">
<br />
<a href="http://www.openneptune.com"><img alt="neptune_logo" src="http://www.jaso.co.kr/neptune/images/neptune.gif" /></a><br />
</div>
<div id="breadcrumbs">
<div class="xleft"></div>
<div class="xright"> </div>
<div class="clear">
<hr /> </div>
</div>
<div id="leftColumn">
  <div id="navcolumn">
    <h5>About</h5>
      <ul>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/index.html">Overview</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/news.html">News</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/download.html">Downloads</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/faq.html">FAQ</a></li>
        <li class="none"><a href="http://code.google.com/p/openneptune/issues/list" target="_blank">Issue Tracker</a></li>
        <li class="none"> <a target="_blank" href="http://code.google.com/p/openneptune/w/list">Wiki</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/license.html">License</a></li>
      </ul>
    <h5>Documentation</h5>
      <ul>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/getting_start.html">Getting started</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/install.html">Installation</a></li>
        <li class="none"><strong>Simple Examples</strong></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/mapreduce.html">MapReduce Example</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/datamodel.html">Data model</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/components.html">Components</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/failover.html">Failover</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/javadoc_en/index.html">API</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/neptune_query.html">Query</a></li>
        <li class="none"><a href="http://www.jaso.co.kr/neptune/performance.html">Performance</a></li>
      </ul>
    <h5>See also</h5>
      <ul>
        <li class="none"><a target="_blank" href="http://labs.google.com/papers/bigtable-osdi06.pdf">Google Bigtable</a></li>
        <li class="none"><a target="_blank" href="http://hadoop.apache.org">Apache Hadoop</a></li>
        <li class="none"><a target="_blank" href="http://dev.naver.com/projects/neptune">Site in Korean</a></li>
      </ul>
  </div>
</div>
<div id="bodyColumn">
  <div id="contentBox">
    <h2>Table creation</h2>
    <div class="section">Table must be created before saving data. Table has columns more than one. If you create a table, neptune creates empty tablet and assign to TabletServer. <br />
      Table name must start with the alphabet and a-z, A-Z, 0-9, '_' are avaliable. <br />
      You can create table with NTable class. Following code is simple
      example and you can find complete source code in neptune examples
      pacakge.
      <div class="source"><pre>
NConfiguration nconf = new NConfiguration();

private void createTable() throws IOException {
  String tableName = "SampleTable";

 //Column names
  String[] columns = new String[]{"Column1", "Column2"};

  String description = "This is test table";

  //TableSchema object.
  TableSchema tableSchema = new TableSchema(tableName, description, columns);

  //set number of version, 0: unlimited, default:3
  tableSchema.setNumOfVersion(0);

  //check table exists.
  boolean exists = NTable.existsTable(nconf, tableName);

  if(exists) {
    System.out.println("Already exists table");
 return;
  }

  //create table
  NTable.createTable(nconf, tableSchema);
}

private void dropTable() throws IOException {
 NTable.dropTable(nconf, "SampleTable");
}</pre>
      </div>
    </div>
    <h2>Data saving</h2>
    <div class="section">You can put/get into/from neptune's table with NTable class. NTable class has put, get method. <br />
      RowFilter, CellFilter is used to specify a more complex search condition.
      <div class="source"><pre>
private void putRow() throws IOException {
 String tableName = "SampleTable";
 //get NTable object
 NTable ntable = NTable.openTable(nconf, tableName);
 
 //create rowkey object 
 Row.Key rowKey = new Row.Key("RowKey1");
 
 //create row object
 Row row = new Row(rowKey);

 //add Cell to row
 row.addCell("Column1", new Cell(new Cell.Key("CK1"), "TestData1".getBytes()));
 row.addCell("Column2", new Cell(Cell.Key.EMPTY_KEY, "TestData2".getBytes()));

 //put method stores data into Tablet
 ntable.put(row);

 //put another row
 row = new Row(new Row.Key("RowKey2"));
 row.addCell("Column1", new Cell(new Cell.Key("CK1"), "TestData3".getBytes()));
 ntable.put(row);
}</pre>
      </div>
    </div>
    <h2>Data retreving</h2>
    <div class="section">Neptune has two kinds of data retreving API. Frist is online data retreving. For online operation like web
      application you can use get() method in NTable. get() method requires
      Row.Key parameter. so&nbsp; If you want to retreive from table for
      real-time operation, you must know Row.Key. Neptune has like and between operation for online data retreving. Like,
      between operation return Row array but maxinum number of Cell.Value is
      5000. Like operation's Row.Key parameter must have at least 4 bytes.<br />
      Second is scanning. Scanner&nbsp;is high speed data retreving tool. You can
      scan full or range data fastly with scanner. Scanner is used
      InputFormat for Hadoop MapReduce Job.<br />
      <br/>
      <strong>Online data retreving</strong><br />
      <div class="source"><pre>
private void getRow() throws IOException {
  String tableName = "SampleTable";
  NTable ntable = NTable.openTable(nconf, tableName);

  Row row = ntable.get(new Row.Key("RK1"));

  List<Cell> column1Cells = row.getCellList("Column1");
  for(Cell eachCell: column1Cells) {
    System.out.println(eachCell.getValue().getValueAsString());
  }

  //get multiple versoin in a single row-cell
  //already 100 versions stored in putRow() method. show FirstApp in examples code
  RowFilter rowFilter = new RowFilter(new Row.Key("RowKey10"));
  CellFilter cellFilter = new CellFilter("Column1");
  cellFilter.setStartTimestamp(Long.MIN_VALUE);
  cellFilter.setEndTimestamp(Long.MAX_VALUE);
  rowFilter.addCellFilter(cellFilter);

  row = ntable.get(rowFilter);
  Cell cell = row.getCellList("Column1").get(0);
  for(Cell.Value eachValue: cell.getValues()) {
    System.out.println(eachValue.getValueAsString());
  }

  //like operation, where rowkey = 'RowKey%'
  RowFilter likeRowFilter = new RowFilter(new Row.Key("RowKey"), RowFilter.OP_LIKE);
  likeRowFilter.addCellFilter(new CellFilter("Column1"));
  rowFilter.addCellFilter(cellFilter);

  Row[] rows = ntable.gets(likeRowFilter);
  if(rows == null || rows.length == 0) {
    System.out.println("No data");
  } else {
  for(Row eachRow: rows) {
    cell = eachRow.getCellList("Column1").get(0);
      for(Cell.Value eachValue: cell.getValues()) {
        System.out.println(eachValue.getValueAsString());
      }
    }
  }
}</pre>
      </div>
      <strong>Scanning</strong><br />
      Scanner is optimized batch processing.
      <div class="source"><pre>
private void scanning() throws IOException {
  NTable ntable = NTable.openTable(nconf, tableName);
  TableScanner scanner = null;
  
  try {
    scanner = ScannerFactory.openScanner(ntable, ntable.getColumnsArray());
    System.out.println("---------- scan by ScanCell -----------");
    ScanCell scanCell = null;
    
    while( (scanCell = scanner.next()) != null ) {
      System.out.println(scanCell.toString());
    }
  } finally {
    //must close
    if(scanner != null) {
      scanner.close();
    }
  }
  
  scanner = null;
  
  try {
    scanner = ScannerFactory.openScanner(ntable, ntable.getColumnsArray());
    System.out.println("---------- scan by Row -----------");
    Row row = null;
    
    while( (row = scanner.nextRow()) != null ) {
      row.print("Column1");
    }
  } finally {
    //must close
    if(scanner != null) {
      scanner.close();
    }
  }    
}</pre>
      </div>
    </div>
    <div class="clear">
      <hr /> 
    </div>
    <div id="footer">
      <div class="xright">Sponsored by <a target="_blank" href="http://www.nhnusainc.com/">NHN</a></div>
    </div>
  </div>
</div>
<script type="text/javascript"> 
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
<script type="text/javascript"> 
var pageTracker = _gat._getTracker("UA-873630-2");
pageTracker._initData();
pageTracker._trackPageview();
</script> 
</body></html>